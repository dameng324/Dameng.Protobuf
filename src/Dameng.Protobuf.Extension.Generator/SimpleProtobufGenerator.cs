using System.Text;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Dameng.Protobuf.Extension.Generator;

[Generator]
public class SimpleProtobufGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context) { }

    public void Execute(GeneratorExecutionContext context)
    {
        foreach (var syntaxTree in context.Compilation.SyntaxTrees)
        {
            var semanticModel = context.Compilation.GetSemanticModel(syntaxTree);
            
            foreach (var node in syntaxTree.GetRoot().DescendantNodesAndSelf())
            {
                if (node is not ClassDeclarationSyntax classDeclaration)
                    continue;

                var targetType = semanticModel.GetDeclaredSymbol(classDeclaration) as INamedTypeSymbol;
                if (targetType is null)
                    continue;

                // Look for ProtoContract attribute
                var hasProtoContract = false;
                foreach (var attr in targetType.GetAttributes())
                {
                    if (attr.AttributeClass?.ToDisplayString() == "Dameng.Protobuf.Extension.ProtoContractAttribute")
                    {
                        hasProtoContract = true;
                        break;
                    }
                }

                if (!hasProtoContract)
                    continue;

                // Generate the basic IMessage implementation
                var sourceCode = GenerateBasicProtobufMessage(targetType);
                var fileName = $"{targetType.Name}.Generated.cs";
                context.AddSource(fileName, SourceText.From(sourceCode, Encoding.UTF8));
            }
        }
    }

    private string GenerateBasicProtobufMessage(INamedTypeSymbol targetType)
    {
        var namespaceName = targetType.ContainingNamespace.ToDisplayString();
        var className = targetType.Name;

        var sourceBuilder = new StringBuilder();
        
        sourceBuilder.AppendLine("// <auto-generated>");
        sourceBuilder.AppendLine("//     Generated by SimpleProtobufGenerator");
        sourceBuilder.AppendLine("// </auto-generated>");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine("using System;");
        sourceBuilder.AppendLine("using System.Collections.Generic;");
        sourceBuilder.AppendLine("using System.Collections.Concurrent;");
        sourceBuilder.AppendLine("using Google.Protobuf;");
        sourceBuilder.AppendLine("using Google.Protobuf.Collections;");
        sourceBuilder.AppendLine("using Google.Protobuf.Reflection;");
        sourceBuilder.AppendLine("using Google.Protobuf.WellKnownTypes;");
        sourceBuilder.AppendLine();
        
        sourceBuilder.AppendLine($"namespace {namespaceName}");
        sourceBuilder.AppendLine("{");
        
        // Generate the partial class that implements IMessage
        sourceBuilder.AppendLine($"    partial class {className} : IMessage<{className}>");
        sourceBuilder.AppendLine("    {");
        
        // Generate static parser
        sourceBuilder.AppendLine($"        private static readonly MessageParser<{className}> _parser = new MessageParser<{className}>(() => new {className}());");
        sourceBuilder.AppendLine($"        public static MessageParser<{className}> Parser {{ get {{ return _parser; }} }}");
        sourceBuilder.AppendLine();
        
        // Add placeholder descriptor
        sourceBuilder.AppendLine("        private static MessageDescriptor _descriptor;");
        sourceBuilder.AppendLine("        public static MessageDescriptor Descriptor");
        sourceBuilder.AppendLine("        {");
        sourceBuilder.AppendLine("            get");
        sourceBuilder.AppendLine("            {");
        sourceBuilder.AppendLine("                if (_descriptor == null)");
        sourceBuilder.AppendLine("                {");
        sourceBuilder.AppendLine("                    _descriptor = new MessageDescriptor(");
        sourceBuilder.AppendLine($"                        \"{className}\",");
        sourceBuilder.AppendLine($"                        typeof({className}),");
        sourceBuilder.AppendLine("                        null, null, null, null, null);");
        sourceBuilder.AppendLine("                }");
        sourceBuilder.AppendLine("                return _descriptor;");
        sourceBuilder.AppendLine("            }");
        sourceBuilder.AppendLine("        }");
        sourceBuilder.AppendLine();
        
        sourceBuilder.AppendLine("        MessageDescriptor IMessage.Descriptor => Descriptor;");
        sourceBuilder.AppendLine();
        
        // Add unknown fields
        sourceBuilder.AppendLine("        private UnknownFieldSet _unknownFields;");
        sourceBuilder.AppendLine();
        
        // Generate Clone method
        sourceBuilder.AppendLine($"        public {className} Clone()");
        sourceBuilder.AppendLine("        {");
        sourceBuilder.AppendLine($"            return new {className}(this);");
        sourceBuilder.AppendLine("        }");
        sourceBuilder.AppendLine();
        
        // Generate copy constructor
        sourceBuilder.AppendLine($"        public {className}({className} other)");
        sourceBuilder.AppendLine("        {");
        sourceBuilder.AppendLine("            // Copy all properties from other");
        foreach (var member in GetProtoMembers(targetType))
        {
            sourceBuilder.AppendLine($"            {member.Name} = other.{member.Name};");
        }
        sourceBuilder.AppendLine("            _unknownFields = UnknownFieldSet.Clone(other._unknownFields);");
        sourceBuilder.AppendLine("        }");
        sourceBuilder.AppendLine();
        
        // Generate Equals methods
        sourceBuilder.AppendLine("        public override bool Equals(object other)");
        sourceBuilder.AppendLine("        {");
        sourceBuilder.AppendLine($"            return Equals(other as {className});");
        sourceBuilder.AppendLine("        }");
        sourceBuilder.AppendLine();
        
        sourceBuilder.AppendLine($"        public bool Equals({className} other)");
        sourceBuilder.AppendLine("        {");
        sourceBuilder.AppendLine("            if (ReferenceEquals(other, null)) return false;");
        sourceBuilder.AppendLine("            if (ReferenceEquals(other, this)) return true;");
        foreach (var member in GetProtoMembers(targetType))
        {
            sourceBuilder.AppendLine($"            if (!object.Equals({member.Name}, other.{member.Name})) return false;");
        }
        sourceBuilder.AppendLine("            return Equals(_unknownFields, other._unknownFields);");
        sourceBuilder.AppendLine("        }");
        sourceBuilder.AppendLine();
        
        // Generate GetHashCode
        sourceBuilder.AppendLine("        public override int GetHashCode()");
        sourceBuilder.AppendLine("        {");
        sourceBuilder.AppendLine("            int hash = 1;");
        foreach (var member in GetProtoMembers(targetType))
        {
            sourceBuilder.AppendLine($"            if ({member.Name} != null) hash ^= {member.Name}.GetHashCode();");
        }
        sourceBuilder.AppendLine("            if (_unknownFields != null) hash ^= _unknownFields.GetHashCode();");
        sourceBuilder.AppendLine("            return hash;");
        sourceBuilder.AppendLine("        }");
        sourceBuilder.AppendLine();
        
        // Generate ToString
        sourceBuilder.AppendLine("        public override string ToString()");
        sourceBuilder.AppendLine("        {");
        sourceBuilder.AppendLine("            return JsonFormatter.ToDiagnosticString(this);");
        sourceBuilder.AppendLine("        }");
        sourceBuilder.AppendLine();
        
        // Generate basic serialization methods - simplified for now
        sourceBuilder.AppendLine("        public void WriteTo(CodedOutputStream output)");
        sourceBuilder.AppendLine("        {");
        sourceBuilder.AppendLine("            if (_unknownFields != null) _unknownFields.WriteTo(output);");
        sourceBuilder.AppendLine("        }");
        sourceBuilder.AppendLine();
        
        sourceBuilder.AppendLine("        public int CalculateSize()");
        sourceBuilder.AppendLine("        {");
        sourceBuilder.AppendLine("            int size = 0;");
        sourceBuilder.AppendLine("            if (_unknownFields != null) size += _unknownFields.CalculateSize();");
        sourceBuilder.AppendLine("            return size;");
        sourceBuilder.AppendLine("        }");
        sourceBuilder.AppendLine();
        
        sourceBuilder.AppendLine($"        public void MergeFrom({className} other)");
        sourceBuilder.AppendLine("        {");
        sourceBuilder.AppendLine("            if (other == null) return;");
        sourceBuilder.AppendLine("            _unknownFields = UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);");
        sourceBuilder.AppendLine("        }");
        sourceBuilder.AppendLine();
        
        sourceBuilder.AppendLine("        public void MergeFrom(CodedInputStream input)");
        sourceBuilder.AppendLine("        {");
        sourceBuilder.AppendLine("            uint tag;");
        sourceBuilder.AppendLine("            while ((tag = input.ReadTag()) != 0) {");
        sourceBuilder.AppendLine("                _unknownFields = UnknownFieldSet.MergeFieldFrom(_unknownFields, input);");
        sourceBuilder.AppendLine("            }");
        sourceBuilder.AppendLine("        }");
        
        sourceBuilder.AppendLine("    }");
        sourceBuilder.AppendLine("}");
        
        return sourceBuilder.ToString();
    }

    private List<ProtoMember> GetProtoMembers(INamedTypeSymbol targetType)
    {
        var members = new List<ProtoMember>();
        
        foreach (var member in targetType.GetMembers())
        {
            if (!(member is IPropertySymbol property) || property.IsStatic)
                continue;
                
            AttributeData protoMemberAttr = null;
            foreach (var attr in property.GetAttributes())
            {
                if (attr.AttributeClass?.ToDisplayString() == "Dameng.Protobuf.Extension.ProtoMemberAttribute")
                {
                    protoMemberAttr = attr;
                    break;
                }
            }
                
            if (protoMemberAttr == null)
                continue;
                
            var tag = (int)protoMemberAttr.ConstructorArguments[0].Value;
            members.Add(new ProtoMember
            {
                Name = property.Name,
                Type = property.Type,
                Tag = tag
            });
        }
        
        return members.OrderBy(m => m.Tag).ToList();
    }

    private class ProtoMember
    {
        public string Name { get; set; } = "";
        public ITypeSymbol Type { get; set; } = null!;
        public int Tag { get; set; }
    }
}